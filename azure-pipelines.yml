trigger:
- main

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '3ac3fb5e-9dae-4724-b2c9-0582deeb73d9'
  imageRepository: 'vitaliistelmakhaspnetcorewebapisample'
  containerRegistry: 'cregsd.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Azure service connection
  azuresub: ''

  # Azure App Service name
  webAppName: 'valera'

stages:

- stage: BuildInfrastructure
  displayName: Build infrastructure
  jobs:
  - job: Terraform
    displayName: Terraform Apply
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: 'latest'
    - task: TerraformTaskV4@4
      displayName: 'Init Terraform'
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'Azure for Students(12c692a0-00e1-447a-8d87-2712018a0472)'
        backendAzureRmResourceGroupName: 'tfstate'
        backendAzureRmStorageAccountName: 'tfstatedocker123'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'terraform.tfstate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
      
    - task: TerraformTaskV4@4
      displayName: 'Validate Terraform'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'

    - task: TerraformTaskV4@4
      displayName: 'Plan Terraform'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        environmentServiceNameAzureRM: 'Azure for Students(12c692a0-00e1-447a-8d87-2712018a0472)'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        commandOptions: >- 
                        
                        -var "subscription_id=$(subscription_id)"
                        -var "client_id=$(client_id)"
                        -var "client_secret=$(client_secret)"
                        -var "tenant_id=$(tenant_id)"

    # - task: TerraformTaskV4@4
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'apply'
    #     environmentServiceNameAzureRM: 'Azure for Students(12c692a0-00e1-447a-8d87-2712018a0472)'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    #     commandOptions: >- 
    #                     -auto-approve \
    #                     -var "subscription_id=$(subscription_id)" \
    #                     -var "client_id=$(client_id)" \
    #                     -var "client_secret=$(client_secret)" \
    #                     -var "tenant_id=$(tenant_id)" \


- stage: Build
  displayName: Build and push stage
  dependsOn: BuildInfrastructure
  condition: succeeded()
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

- stage: Deploy
  displayName: Deploy to Azure App Service
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployWebApp
    displayName: Deploy Web App
    environment: 'production'
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebAppContainer@1
            inputs:
              azureSubscription: 'Azure for Students(12c692a0-00e1-447a-8d87-2712018a0472)'
              appName: $(webAppName)
              containers: '$(containerRegistry)/$(imageRepository):$(tag)'